import matplotlib.pylab as plt
import numpy as np
import math
import time

Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)
def hammingWeight(binary):
    return str(binary).count("1")


def Gaussian(x, mean, noise):
    return 1 / (pow(2 * math.pi * noise, 0.5)) * np.exp(-((x - mean) ** 2) / (2 * noise))


def UNP_TA(x, key, noise):
    pr_leakage = Gaussian(x, hammingWeight(bin(Sbox[key] ^ 0)), noise)
    return pr_leakage


def f(x, mean, noise):
    # pr_key = 1 / 256
    BayesDenominator = 0
    for key in range(256):
        pr_leakage = UNP_TA(x, key, noise)
        BayesDenominator += pr_leakage
    return Gaussian(x, mean, noise) * math.log(Gaussian(x, mean, noise) / BayesDenominator, 2)


def integrate(mean, noise, a, b, n):
    interval = (b - a) / n
    sum = 0
    for i in range(0, n):
        left = a + interval * i
        right = a + interval * (i + 1)
        temp1 = f(left, mean, noise)
        temp2 = f(right, mean, noise)
        sum += (temp1 + temp2) * interval / 2
    return sum


def Mutual_Info(noise):
    H_key = 8
    pr_key = 1 / 256
    sum = 0
    # if noise == 2 ** (-10):
    #     temp = 1
    # elif noise <= 2 ** (-6):
    #     temp = 10 + math.log(noise, 2)
    # elif noise <= 2 ** (-3):
    #     temp = 4 + 2 ** (6 + math.log(noise, 2))
    # elif noise <= 1:
    #     temp = 9 * (4 + math.log(noise, 2))
    # elif noise == 2:
    #     temp = 54
    # elif noise == 4:
    #     temp = 77
    # elif noise == 8:
    #     temp = 109
    # elif noise == 16:
    #     temp = 154
    # elif noise == 32:
    #     temp = 217
    # elif noise == 64:
    #     temp = 308
    # elif noise == 128:
    #     temp = 435
    # elif noise == 256:
    #     temp = 616
    # elif noise == 512:
    #     temp = 871
    # else:
    #     temp = 1231
    # if noise < 1:
    #     n = 50
    # elif noise < 8:
    #     n = 200
    # else:
    #     n = 20 * math.ceil(math.sqrt(noise))
    temp = math.ceil(2 * math.sqrt(noise))
    n = math.ceil(20 * noise)
    if noise == 16:
        temp = 9
    if noise <= 0.125:
        n = 1
    # if noise == 2 ** (-4):
    #     n = 10
    if noise == 1:
        n = 40
    for key in range(256):
        # integration, err = integrate.quad(f, -20, 20, args=(hammingWeight(bin(i ^ 0)), noise))
        u = hammingWeight(bin(Sbox[key] ^ 0))
        integration = integrate(u, noise, u - temp, u + temp, n)
        sum += integration * pr_key
    print("noise = ", noise, " 时，Mutual Information = ", H_key + sum)
    return H_key + sum


if __name__ == '__main__':
    # data = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
    # key = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
    time_start = time.time()
    x = []
    for i in range(21):
        x.append(i - 10)
    y = []
    for i in range(len(x)):
        y.append(Mutual_Info(2 ** (x[i])))
    print(y)
    plt.yscale('log')
    plt.xlabel("Noise")
    plt.ylabel("Mutual Information")
    plt.plot(x, y, marker="o")
    plt.yticks([100, 10, 1, 0.1, 0.01, 0.001])
    plt.show()
    time_end = time.time()
    print('totol time:', time_end - time_start)
